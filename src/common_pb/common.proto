package xy;

message Info
{
    optional uint32 id = 1;
    optional string name = 2;
}

// rpc 调用方式
enum ECallType
{
    ECallType_Sync   = 0;    // 同步
    ECallType_Async  = 1;    // 异步
    ECallType_OneWay = 2;    // 单向
//    THREAD_EXIT = 3;    // 线程退出的标识
};

enum EPackageType{
    EPackageType_Pb    = 0;    // protobuf
    EPackageType_Json  = 1;    // json
};

// rpc 调用错误码
enum ERetCode{

    ERetCode_UNKnowErr      = -10;  // 未知错误
    ERetCode_Overload       = -9;   // 过载
    ERetCode_UNKnowFunc     = -1;   // 函数名未知
    ERetCode_SUCC           = 0;    // 成功
};

message RequestPacket{
    optional uint32     iVersion        = 1;
    optional uint32     iRequestId      = 2;
    optional string     sFuncName       = 3;
    optional uint32     cPacketType     = 4;    // EPackageType
    optional bytes      sBuffer         = 5;    // 实际接口请求的协议的 pb 序列化(例如接口 search的 SearchReq)
    optional uint32     iTimeoutMs      = 6;    // 多少毫秒算超时(例如1500, 代表1500ms超时, 服务端会算收包的实际以及相应的实际, 然后判断是否超时)
    map<string, string> context         = 7;    // 上下文
};

message ResponsePacket{
    optional uint32     iVersion        = 1;
    optional uint32     iRequestId      = 2;
    optional uint32     cPacketType     = 3;   // EPackageType
    optional bytes      sBuffer         = 4;   // pb 序列化
    optional int32      iRetCode        = 5;   // 返回结果 ERetCode
    optional string     sRetDesc        = 6;   // 结果描述
    map<string, string> context         = 7;   // 上下文
};

// 请求状态
enum EReqStatus
{
    EReqStatus_Doing      = 0;    // 状态正常, 正在请求中
    EReqStatus_Finish     = 1;    // 请求已经发出去
    EReqStatus_Timeout    = 2;    // 请求超时
    EReqStatus_Exception  = 3;    // 客户端请求异常
};
